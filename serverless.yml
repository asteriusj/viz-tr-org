# Welcome to serverless. Read the docs
# https://serverless.com/framework/docs/

# Serverless.yml is the configuration the CLI
# uses to deploy your code to your provider of choice

# The `service` block is the name of the service
service: viz-tr-org

plugins:
  - serverless-finch
  - serverless-s3-sync
provider:
  name: aws
  runtime: nodejs6.10

custom:
  client:
    bucketName: viz.transformrockford.org
    distributionFolder: src/
    # distributionFolder: dist/
    indexDocument: index.html
    errorDocument: 401.html
    
  siteName: ${self:custom.client.bucketName}
  aliasHostedZoneId: Z2FDTNDATAQYW2     # us-east-1
  aliasDNSName: s3-website-us-east-1.amazonaws.com
    
    
### Add Route 53 from plugin example  
resources:
  Resources:
    ## Specifying the S3 Bucket
    StaticSite:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicRead
        BucketName: ${self:custom.client.bucketName}
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: 404.html

    StaticSiteS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: StaticSite
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: '*'
              Action:
                - s3:GetObject
              Resource:
                Fn::Join: [
                  "", [
                    "arn:aws:s3:::",
                    {
                      "Ref": "StaticSite"
                    },
                    "/*"
                  ]
                ]

    StaticSiteCert:
      Type: AWS::CertificateManager::Certificate
      Properties:
        DomainName: ${self:custom.siteName}
        DomainValidationOptions:
        - DomainName: ${self:custom.siteName}
          ValidationDomain: ${self:custom.siteName}

    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName:
                Fn::GetAtt:
                  - StaticSite
                  - DomainName
              # It isn't necessary to sue this value; but we need the same
              # value for DefaultCacheBehavior.TargetOriginId
              Id:
                Ref: StaticSite
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: https-only
          Enabled: 'true'
          Aliases:
            - ${self:custom.siteName}
          DefaultRootObject: index.html
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /404.html
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
            TargetOriginId:
              Ref: StaticSite
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          ViewerCertificate:
            AcmCertificateArn:
              Ref: StaticSiteCert
            SslSupportMethod: sni-only
          ## Uncomment the following section in case you want to enable logging for CloudFront requests
          # Logging:
          #  IncludeCookies: 'false'
          #   Bucket: mylogs.s3.amazonaws.com
          #   Prefix: myprefix
      DependsOn:
        - StaticSiteS3BucketPolicy

    DnsRecord:
      Type: "AWS::Route53::RecordSet"
      Properties:
        AliasTarget:
          DNSName:
            Fn::GetAtt:
              - CloudFrontDistribution
              - DomainName
          HostedZoneId: ${self:custom.aliasHostedZoneId}
        HostedZoneName: ${self:custom.siteName}.
        Name: ${self:custom.siteName}.
        Type: 'A'

  Outputs:
    StaticSiteS3BucketName:
      Value:
        Ref: StaticSite
    CloudFrontDistribution:
      Value:
        Fn::GetAtt:
          - CloudFrontDistribution
          - DomainName
